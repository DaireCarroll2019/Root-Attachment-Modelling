#script for calculating rate of attachment

library(dplyr)
library(tidyverse)
library(growthrates)
library(deSolve)
library(lattice)
library(ggplot2)
library(gridExtra)
library(cowplot)	#load packages

rm(list=ls())
graphics.off()  
detach(my.data)	#clear previous work

#================

Kc = 8.855974
y0c = 0.007333
muc = 0.184677
Kp = 9.04029218
y0p = 0.02508862
mup = 0.09949397	#prameters fit using growthrates

Kp = Kc #constrain carrying capacity to that calculated for total attachment

time = c(1:96)
#=================

Yc = function(time){
Kc/(1+(Kc/y0c-1)*exp(-muc*time))
}						#logistic equation for total colonisation

Yc1 = expression(
Kc/(1+(Kc/y0c-1)*exp(-muc*time))
)

D(Yc1,'time') #differentiate it

Gc = function(time){
Kc * ((Kc/y0c - 1) * (exp(-muc * time) * muc))/(1 + (Kc/y0c - 
    1) * exp(-muc * time))^2
}						#growth rate for total colonisation

points = Gc(time)

plot(time,points)

#=======================

Yp = function(time){
Kp/(1+(Kp/y0p-1)*exp(-mup*time))
}						#logistic equation for proliferation

Yp1 = expression(
Kp/(1+(Kp/y0p-1)*exp(-mup*time))
)

D(Yp1,'time') #differentiate it

Gp = function(time){
Kp * ((Kp/y0p - 1) * (exp(-mup * time) * mup))/(1 + (Kp/y0p - 
    1) * exp(-mup * time))^2
}						#growth rate for proliferation

pointsp = Gp(time)

plot(time,pointsp)

summary(pointsp)
summary(points)

#=======================

Gcont = function(time){					
mup*(Yc(time)*(Kp-Yc(time))/Kp)
}			#substitute y0 for Yc 

pointscont = Gcont(time)

summary(pointscont)

Ga = function(time){
Gc(time) - Gcont(time)
}						#rate of attacment is difference between two rates

pointsattached = Ga(time)

plot(time,pointsattached)

#========================

rates = data.frame(time, points, pointsp, pointsattached)

#==============================================================

#intergrate that Ga equation to get reasonable values for attachment

intval <- integrate(Ga,lower=0,upper=10) 
str(intval)
intval$value

attachment.values <- vector("numeric",96) 

for(i in 0:96){
intval = integrate(Ga,lower=0,upper=i) 
str(intval)
attachment.values[i] = (intval$value)
}

attachment.values

#==============================================================

total.values = Yc(time)

proliferation.values = Yp(time)

model.values = data.frame(time,total.values,proliferation.values,attachment.values)

#=================================
#plot rates

my_colors = c("Total"="blue1","Proliferation"="darkorange","Attachment"="brown2")

cleanup_grid = theme(panel.border = element_blank(),
	panel.grid.major = element_blank(),
		panel.grid.minor = element_blank(),
			panel.background = element_blank(),
				axis.line = element_line(color = "black"),
					)
		
cleanup_text = theme(axis.text.x = element_text(color = "black", size = 12, angle = 0, hjust = .5, vjust = .5, face = "plain"),
	axis.text.y = element_text(color = "black", size = 12, angle = 0, hjust = 0.8, vjust = 0.4, face = "plain"),  
		axis.title.x = element_text(color = "black", size = 20, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        		axis.title.y = element_text(color = "black", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"))			


p <- ggplot(rates, aes(time)) +	
	scale_color_manual(name = "Legend", values = my_colors) +	
		
			geom_line(aes(y=points, col = "Total"), size = 1.3) +			

			geom_line(aes(y=pointsp, col = "Proliferation"), size = 1.3)	+			

								labs(x="Time (Hour)", y=expression("Rate "~(CFU[normalised]~Hour^1))) +

							cleanup_grid +
								cleanup_text +

									theme(legend.text=element_text(size=12)) +
										theme(legend.title=element_text(size=12))

#=======================================
#plot CFUnormalised

my_colors = c("Total"="blue1","Proliferation"="darkorange","Attachment"="brown2")

cleanup_grid = theme(panel.border = element_blank(),
	panel.grid.major = element_blank(),
		panel.grid.minor = element_blank(),
			panel.background = element_blank(),
				axis.line = element_line(color = "black"),
					)
		
cleanup_text = theme(axis.text.x = element_text(color = "black", size = 12, angle = 0, hjust = .5, vjust = .5, face = "plain"),
	axis.text.y = element_text(color = "black", size = 12, angle = 0, hjust = 0.8, vjust = 0.4, face = "plain"),  
		axis.title.x = element_text(color = "black", size = 20, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        		axis.title.y = element_text(color = "black", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"))			


p <- ggplot(model.values, aes(time)) +	
	scale_color_manual(name = "Legend", values = my_colors) +	
		
			geom_line(aes(y=total.values, col = "Total"), size = 1.3) +			

			geom_line(aes(y=proliferation.values, col = "Proliferation"), size = 1.3)	+			

			geom_line(aes(y=attachment.values, col = "Attachment"), size = 1.3)	+			

					labs(x="Time (Hours)", y=expression(CFU[normalised])) + 

							cleanup_grid +
								cleanup_text +

									theme(legend.text=element_text(size=12)) +
										theme(legend.title=element_text(size=12))
#======================================

Gcont = function(time){					
mup*(Yc(time)*(Kp-Yc(time))/Kp)
}			#substitute y0 for Yc 

plot(time,Gcont(time))

boc <- vector("numeric",96) 

for(i in 0:96){
intval = integrate(Gcont,lower=0,upper=i) 
str(intval)
boc[i] = (intval$value)
}

plot(time,boc)

Gcont(time) 

#=


